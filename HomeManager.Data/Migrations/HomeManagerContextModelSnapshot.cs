// <auto-generated />
using System;
using HomeManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HomeManager.Data.Migrations
{
    [DbContext(typeof(HomeManagerContext))]
    partial class HomeManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("HomeManager.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("fk_UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Name = "Living"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Name = "Groceries"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Name = "Leisure"
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            Name = "Mobility"
                        },
                        new
                        {
                            Id = 5,
                            Deleted = false,
                            Name = "Insurance"
                        },
                        new
                        {
                            Id = 6,
                            Deleted = false,
                            Name = "Loans"
                        },
                        new
                        {
                            Id = 7,
                            Deleted = false,
                            Name = "Saving"
                        });
                });

            modelBuilder.Entity("HomeManager.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Amount_Extra")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount_Gross")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount_Net")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount_Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Amount_TaxList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_Extra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_Tax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Invoice")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("fk_CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("fk_StatusId")
                        .HasColumnType("int");

                    b.Property<int>("fk_TypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("fk_CategoryId");

                    b.HasIndex("fk_StatusId");

                    b.HasIndex("fk_TypeId");

                    b.HasIndex("fk_UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HomeManager.Models.Payment_Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Invoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fk_CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("fk_TypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("fk_CategoryId");

                    b.HasIndex("fk_TypeId");

                    b.HasIndex("fk_UserId");

                    b.ToTable("Payment_Templates");
                });

            modelBuilder.Entity("HomeManager.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("898da44c-f5c4-45a4-7236-08d8c9fa7c8f"),
                            ConcurrencyStamp = "cc4e0669-e7ef-4edc-83d7-977ef284d407",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("c50e0c00-bf4a-4e6a-8b06-08d8ca5d9e57"),
                            ConcurrencyStamp = "896e6ba7-5b4f-4231-bcc7-34aba5ca1e57",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("626e5439-ac0e-423f-f10a-08d8cabafa0b"),
                            ConcurrencyStamp = "714a5239-a8a3-4b42-af07-033481bd81e0",
                            Name = "Test",
                            NormalizedName = "TEST"
                        });
                });

            modelBuilder.Entity("HomeManager.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EndPoint")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            EndPoint = true,
                            Name = "Paid"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            EndPoint = true,
                            Name = "Received"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            EndPoint = false,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            EndPoint = false,
                            Name = "Fictitious"
                        });
                });

            modelBuilder.Entity("HomeManager.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Debit")
                        .HasColumnType("bit");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTaxType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraInput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fk_StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_StatusId");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Debit = false,
                            Deleted = false,
                            EndTaxType = "Net",
                            ExtraInput = "Extra_Amount,TaxList",
                            Name = "Salary",
                            fk_StatusId = 2
                        },
                        new
                        {
                            Id = 2,
                            Debit = true,
                            Deleted = false,
                            EndTaxType = "Gross",
                            Name = "Monthly Expens",
                            fk_StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Debit = true,
                            Deleted = false,
                            EndTaxType = "Gross",
                            ExtraInput = "Extra_Amount",
                            Name = "Expenditure",
                            fk_StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Debit = false,
                            Deleted = false,
                            EndTaxType = "Net",
                            ExtraInput = "Extra_Amount",
                            Name = "Earnings",
                            fk_StatusId = 2
                        },
                        new
                        {
                            Id = 5,
                            Debit = false,
                            Deleted = false,
                            EndTaxType = "None",
                            Name = "Start Balance",
                            fk_StatusId = 2
                        });
                });

            modelBuilder.Entity("HomeManager.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c30add5-c7a9-48e9-6beb-08d8c9d5dc9c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22ac1596-f950-40cc-ad84-92df87f8d892",
                            Email = "Francesco.Aepler@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "FRANCESCO.AEPLER@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENCkeX4zTaT+Tre5hnrmc1oMzq420b8/GcdRhtRgWXknIW9VmEdemaVj0SVLTxJERA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YK7VQDBLK2PUOJNEK7YKOW7NQDH7EDYO",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1c30add5-c7a9-48e9-6beb-08d8c9d5dc9c"),
                            RoleId = new Guid("898da44c-f5c4-45a4-7236-08d8c9fa7c8f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HomeManager.Models.Category", b =>
                {
                    b.HasOne("HomeManager.Models.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("fk_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeManager.Models.Payment", b =>
                {
                    b.HasOne("HomeManager.Models.Category", "Category")
                        .WithMany("Payments")
                        .HasForeignKey("fk_CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeManager.Models.Status", "Status")
                        .WithMany("Payments")
                        .HasForeignKey("fk_StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeManager.Models.Type", "Type")
                        .WithMany("Payments")
                        .HasForeignKey("fk_TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeManager.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("fk_UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Status");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeManager.Models.Payment_Template", b =>
                {
                    b.HasOne("HomeManager.Models.Category", "Category")
                        .WithMany("Payment_Templates")
                        .HasForeignKey("fk_CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeManager.Models.Type", "Type")
                        .WithMany("Payment_Templates")
                        .HasForeignKey("fk_TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeManager.Models.User", "User")
                        .WithMany("Payment_Templates")
                        .HasForeignKey("fk_UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeManager.Models.Type", b =>
                {
                    b.HasOne("HomeManager.Models.Status", "Status")
                        .WithMany("Types")
                        .HasForeignKey("fk_StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HomeManager.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HomeManager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HomeManager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HomeManager.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeManager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HomeManager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeManager.Models.Category", b =>
                {
                    b.Navigation("Payment_Templates");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("HomeManager.Models.Status", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("HomeManager.Models.Type", b =>
                {
                    b.Navigation("Payment_Templates");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("HomeManager.Models.User", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Payment_Templates");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
