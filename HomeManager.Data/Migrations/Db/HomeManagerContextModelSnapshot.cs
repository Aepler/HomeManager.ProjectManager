// <auto-generated />
using System;
using HomeManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HomeManager.Data.Migrations.Db
{
    [DbContext(typeof(HomeManagerDbContext))]
    partial class HomeManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HomeManager.Models.Entities.Cooking.Favorites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("fk_RecipeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("fk_RecipeId");

                    b.ToTable("CookingFavorites");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Cooking.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ammount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.ToTable("CookingIngredients");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Cooking.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("CookingTime")
                        .HasColumnType("time");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("PreapearingTime")
                        .HasColumnType("time");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<byte>("Stars")
                        .HasColumnType("tinyint");

                    b.Property<TimeSpan>("TotalTime")
                        .HasColumnType("time");

                    b.Property<Guid>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CookingRecipes");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Cooking.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CookingTags");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FinanceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65df89ea-df64-4074-a36c-6b15d1f16baf"),
                            Deleted = false,
                            Name = "Living"
                        },
                        new
                        {
                            Id = new Guid("05e8b5cb-e640-4a20-8c4a-258626c90a84"),
                            Deleted = false,
                            Name = "Groceries"
                        },
                        new
                        {
                            Id = new Guid("e9187c61-0682-40d9-8a78-8098bfd5f401"),
                            Deleted = false,
                            Name = "Leisure"
                        },
                        new
                        {
                            Id = new Guid("6a7d9b47-7967-497f-8276-735d0a46cbcb"),
                            Deleted = false,
                            Name = "Mobility"
                        },
                        new
                        {
                            Id = new Guid("327b058f-4182-4ca1-9c1b-cfa46e3f59e0"),
                            Deleted = false,
                            Name = "Insurance"
                        },
                        new
                        {
                            Id = new Guid("de9f70b1-e498-4e6f-aba8-b290a7f91111"),
                            Deleted = false,
                            Name = "Loans"
                        },
                        new
                        {
                            Id = new Guid("1e02aece-87a5-43a4-9407-232718500157"),
                            Deleted = false,
                            Name = "Saving"
                        });
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedTaxAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedTaxDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedTaxRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraCostAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraCostDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GrossAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<byte[]>("InvoiceData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("InvoiceDataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("TaxDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxRate")
                        .HasColumnType("int");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("WarrantyExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("fk_CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("fk_RepeatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("fk_StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("fk_TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("fk_WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("fk_CategoryId");

                    b.HasIndex("fk_RepeatingId");

                    b.HasIndex("fk_StatusId");

                    b.HasIndex("fk_TypeId");

                    b.HasIndex("fk_WalletId");

                    b.ToTable("FinancePayments");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Repeating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedTaxAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedTaxDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedTaxRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraCostAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraCostDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GrossAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<byte[]>("InvoiceData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("InvoiceDataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime?>("RepeatEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("RepeatInterval")
                        .HasColumnType("int");

                    b.Property<DateTime>("RepeatStart")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("TaxDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxRate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WarrantyExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("fk_CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("fk_TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("fk_WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("fk_CategoryId");

                    b.HasIndex("fk_TypeId");

                    b.HasIndex("fk_WalletId");

                    b.ToTable("FinanceRepeatings");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EndPoint")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FinanceStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58ae656b-0b17-4eed-aeeb-eeb660db266b"),
                            Deleted = false,
                            EndPoint = true,
                            Name = "Paid"
                        },
                        new
                        {
                            Id = new Guid("641dde1b-2959-47ca-bbc6-d0979ff2bc14"),
                            Deleted = false,
                            EndPoint = true,
                            Name = "Received"
                        },
                        new
                        {
                            Id = new Guid("c04f9f24-36c9-4569-86ed-3aa4e51278be"),
                            Deleted = false,
                            EndPoint = false,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("26425888-2203-422d-8cf1-44400b5f9459"),
                            Deleted = false,
                            EndPoint = false,
                            Name = "Fictitious"
                        });
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedTaxAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedTaxDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedTaxRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraCostAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraCostDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GrossAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<byte[]>("InvoiceData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("InvoiceDataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("TaxDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxRate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WarrantyExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("fk_CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("fk_TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("fk_CategoryId");

                    b.HasIndex("fk_TypeId");

                    b.ToTable("FinanceTemplates");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DefaultTaxRate")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndTaxType")
                        .HasColumnType("int");

                    b.Property<string>("ExtraInput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Repeating")
                        .HasColumnType("bit");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<Guid>("fk_StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("fk_StatusId");

                    b.ToTable("FinanceTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66b2ecfa-915d-4ca1-af3f-e5c8602d1c23"),
                            Deleted = false,
                            EndTaxType = 1,
                            ExtraInput = "1,2",
                            Name = "Salary",
                            Repeating = false,
                            TransactionType = 2,
                            fk_StatusId = new Guid("641dde1b-2959-47ca-bbc6-d0979ff2bc14")
                        },
                        new
                        {
                            Id = new Guid("6b423c70-1edd-4988-9cc4-bd4b77eef7e0"),
                            DefaultTaxRate = 19,
                            Deleted = false,
                            EndTaxType = 2,
                            ExtraInput = "3",
                            Name = "Monthly Expens",
                            Repeating = true,
                            TransactionType = 1,
                            fk_StatusId = new Guid("58ae656b-0b17-4eed-aeeb-eeb660db266b")
                        },
                        new
                        {
                            Id = new Guid("93399d01-9c77-483d-bd70-964898a7d875"),
                            DefaultTaxRate = 19,
                            Deleted = false,
                            EndTaxType = 2,
                            ExtraInput = "1,3,4",
                            Name = "Expenditure",
                            Repeating = false,
                            TransactionType = 1,
                            fk_StatusId = new Guid("58ae656b-0b17-4eed-aeeb-eeb660db266b")
                        },
                        new
                        {
                            Id = new Guid("2cdc950b-c30d-4cbe-a0ca-0965f86cb9ac"),
                            Deleted = false,
                            EndTaxType = 1,
                            ExtraInput = "1,3",
                            Name = "Earnings",
                            Repeating = false,
                            TransactionType = 2,
                            fk_StatusId = new Guid("641dde1b-2959-47ca-bbc6-d0979ff2bc14")
                        });
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BalanceUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(9,2)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StartBalance")
                        .HasColumnType("decimal(9,2)");

                    b.Property<Guid>("fk_UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FinanceWallets");
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.Property<int>("IngredientsId")
                        .HasColumnType("int");

                    b.Property<int>("RecipesId")
                        .HasColumnType("int");

                    b.HasKey("IngredientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("CookingIngredientRecipes");
                });

            modelBuilder.Entity("IngredientTag", b =>
                {
                    b.Property<int>("IngredientsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("IngredientsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("CookingIngredientTags");
                });

            modelBuilder.Entity("RecipeTag", b =>
                {
                    b.Property<int>("RecipesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("RecipesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("CookingRecipeTags");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Cooking.Favorites", b =>
                {
                    b.HasOne("HomeManager.Models.Entities.Cooking.Recipe", "Recipe")
                        .WithMany("Favorites")
                        .HasForeignKey("fk_RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Cooking.Ingredient", b =>
                {
                    b.HasOne("HomeManager.Models.Entities.Cooking.Ingredient", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("IngredientId");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Payment", b =>
                {
                    b.HasOne("HomeManager.Models.Entities.Finance.Template", null)
                        .WithMany("Payments")
                        .HasForeignKey("TemplateId");

                    b.HasOne("HomeManager.Models.Entities.Finance.Category", "Category")
                        .WithMany("Payments")
                        .HasForeignKey("fk_CategoryId");

                    b.HasOne("HomeManager.Models.Entities.Finance.Repeating", "Repeating")
                        .WithMany("Payments")
                        .HasForeignKey("fk_RepeatingId");

                    b.HasOne("HomeManager.Models.Entities.Finance.Status", "Status")
                        .WithMany("Payments")
                        .HasForeignKey("fk_StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeManager.Models.Entities.Finance.Type", "Type")
                        .WithMany("Payments")
                        .HasForeignKey("fk_TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeManager.Models.Entities.Finance.Wallet", "Wallet")
                        .WithMany("Payments")
                        .HasForeignKey("fk_WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Repeating");

                    b.Navigation("Status");

                    b.Navigation("Type");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Repeating", b =>
                {
                    b.HasOne("HomeManager.Models.Entities.Finance.Category", "Category")
                        .WithMany("Repeatings")
                        .HasForeignKey("fk_CategoryId");

                    b.HasOne("HomeManager.Models.Entities.Finance.Type", "Type")
                        .WithMany("Repeatings")
                        .HasForeignKey("fk_TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeManager.Models.Entities.Finance.Wallet", "Wallet")
                        .WithMany("Repeatings")
                        .HasForeignKey("fk_WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Type");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Template", b =>
                {
                    b.HasOne("HomeManager.Models.Entities.Finance.Category", "Category")
                        .WithMany("Templates")
                        .HasForeignKey("fk_CategoryId");

                    b.HasOne("HomeManager.Models.Entities.Finance.Type", "Type")
                        .WithMany("Templates")
                        .HasForeignKey("fk_TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Type", b =>
                {
                    b.HasOne("HomeManager.Models.Entities.Finance.Status", "Status")
                        .WithMany("Types")
                        .HasForeignKey("fk_StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.HasOne("HomeManager.Models.Entities.Cooking.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeManager.Models.Entities.Cooking.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientTag", b =>
                {
                    b.HasOne("HomeManager.Models.Entities.Cooking.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeManager.Models.Entities.Cooking.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeTag", b =>
                {
                    b.HasOne("HomeManager.Models.Entities.Cooking.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeManager.Models.Entities.Cooking.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Cooking.Ingredient", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Cooking.Recipe", b =>
                {
                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Category", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Repeatings");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Repeating", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Status", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Template", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Type", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Repeatings");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("HomeManager.Models.Entities.Finance.Wallet", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Repeatings");
                });
#pragma warning restore 612, 618
        }
    }
}
